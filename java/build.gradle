import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id "net.ltgt.errorprone" version "3.1.0"
}

group = 'io.temporal.springboot.example'
// version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

ext {
    javaSDKVersion = '1.30.1'
    lombokVersion = '1.18.30'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    implementation "io.temporal:temporal-spring-boot-starter:$javaSDKVersion"
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'info.picocli:picocli:4.7.5'
    implementation 'commons-cli:commons-cli:1.6.0'
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    dependencies {
        errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
        errorprone('com.google.errorprone:error_prone_core:2.23.0')
    }
}

bootJar {
    mainClass = 'io.temporal.demo.wealthmanagement.StartTheWorker'
    enabled = true
}

bootRun {
    mainClass = 'io.temporal.demo.wealthmanagement.StartTheWorker'
    enabled = true
}



jar {
    enabled = false
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('testClientMgr', BootRun) {
    mainClass = 'io.temporal.demo.wealthmanagement.service.ClientManagerApp'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('testInvestmentMgr', BootRun) {
    mainClass = 'io.temporal.demo.wealthmanagement.service.InvestmentManagerCliRunner'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runWorker', JavaExec) {
    dependsOn 'classes'
    mainClass = 'io.temporal.demo.wealthmanagement.StartTheWorker'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('startWorkflow', JavaExec) {
    dependsOn 'classes'
    mainClass = 'io.temporal.demo.wealthmanagement.workflowstarter.StartTheWorkflow'
    classpath = sourceSets.main.runtimeClasspath
}
